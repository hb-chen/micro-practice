// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/hb-chen/micro-starter/service/greeting/proto/greeting/greeting.proto

package greeting

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "micro.dev/v4/service/api"
	client "micro.dev/v4/service/client"
	server "micro.dev/v4/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Greeting service

func NewGreetingEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Greeting service

type GreetingService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	List(ctx context.Context, in *Page, opts ...client.CallOption) (*ListResponse, error)
}

type greetingService struct {
	c    client.Client
	name string
}

func NewGreetingService(name string, c client.Client) GreetingService {
	return &greetingService{
		c:    c,
		name: name,
	}
}

func (c *greetingService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Greeting.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingService) List(ctx context.Context, in *Page, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Greeting.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeting service

type GreetingHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	List(context.Context, *Page, *ListResponse) error
}

func RegisterGreetingHandler(s server.Server, hdlr GreetingHandler, opts ...server.HandlerOption) error {
	type greeting interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		List(ctx context.Context, in *Page, out *ListResponse) error
	}
	type Greeting struct {
		greeting
	}
	h := &greetingHandler{hdlr}
	return s.Handle(s.NewHandler(&Greeting{h}, opts...))
}

type greetingHandler struct {
	GreetingHandler
}

func (h *greetingHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.GreetingHandler.Call(ctx, in, out)
}

func (h *greetingHandler) List(ctx context.Context, in *Page, out *ListResponse) error {
	return h.GreetingHandler.List(ctx, in, out)
}
